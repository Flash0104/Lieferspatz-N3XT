import { getDistanceBetweenAddresses } from '@/lib/geocoding';
import { prisma } from '@/lib/prisma';
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { city, streetName, blockNumber, postalCode } = body;

    if (!city || !streetName || !blockNumber) {
      return NextResponse.json(
        { error: 'City, street name, and block number are required' },
        { status: 400 }
      );
    }

    const customerAddress = {
      city,
      streetName,
      blockNumber,
      postalCode
    };

    // Get all restaurants with complete address data
    const restaurants = await prisma.restaurant.findMany({
      where: {
        AND: [
          { city: { not: null } },
          { streetName: { not: null } },
          { blockNumber: { not: null } }
        ]
      },
      select: {
        id: true,
        name: true,
        city: true,
        streetName: true,
        blockNumber: true,
        postalCode: true,
        address: true,
        description: true,
        rating: true,
        isOpen: true,
        averagePrepTime: true,
        imageUrl: true,
        latitude: true,
        longitude: true
      }
    });

    // Calculate distances with timeout
    const restaurantsWithDistance = await Promise.all(
      restaurants.map(async (restaurant) => {
        const restaurantAddress = {
          city: restaurant.city!,
          streetName: restaurant.streetName!,
          blockNumber: restaurant.blockNumber!,
          postalCode: restaurant.postalCode || undefined
        };

        try {
          const distance = await Promise.race([
            getDistanceBetweenAddresses(customerAddress, restaurantAddress),
            new Promise<null>((_, reject) => 
              setTimeout(() => reject(new Error('Timeout')), 2000)
            )
          ]);

          return {
            ...restaurant,
            distance: distance ? parseFloat(distance.toFixed(2)) : null,
            distanceText: distance 
              ? `${distance.toFixed(1)} km` 
              : 'Distance unavailable'
          };
        } catch (error) {
          return {
            ...restaurant,
            distance: null,
            distanceText: 'Distance unavailable'
          };
        }
      })
    );

    // Sort by distance (closest first)
    const sortedRestaurants = restaurantsWithDistance.sort((a, b) => {
      if (a.distance === null) return 1;
      if (b.distance === null) return -1;
      return a.distance - b.distance;
    });

    return NextResponse.json(sortedRestaurants);
  } catch (error) {
    console.error('Error fetching restaurants with distance:', error);
    return NextResponse.json(
      { error: 'Failed to fetch restaurants with distance' },
      { status: 500 }
    );
  }
}

// GET endpoint for testing with default customer location
export async function GET() {
  try {
    // Default customer address (your location)
    const defaultCustomerAddress = {
      city: 'Duisburg',
      streetName: 'Sonnenwall',
      blockNumber: '56',
      postalCode: '47057'
    };

    const restaurants = await prisma.restaurant.findMany({
      where: {
        AND: [
          { city: { not: null } },
          { streetName: { not: null } },
          { blockNumber: { not: null } }
        ]
      },
      select: {
        id: true,
        name: true,
        city: true,
        streetName: true,
        blockNumber: true,
        postalCode: true,
        address: true,
        description: true,
        rating: true,
        isOpen: true,
        averagePrepTime: true,
        imageUrl: true
      }
    });

    // Calculate distances with timeout for faster response
    const restaurantsWithDistance = await Promise.all(
      restaurants.map(async (restaurant) => {
        const restaurantAddress = {
          city: restaurant.city!,
          streetName: restaurant.streetName!,
          blockNumber: restaurant.blockNumber!,
          postalCode: restaurant.postalCode || undefined
        };

        try {
          const distance = await Promise.race([
            getDistanceBetweenAddresses(defaultCustomerAddress, restaurantAddress),
            new Promise<null>((_, reject) => 
              setTimeout(() => reject(new Error('Timeout')), 2000)
            )
          ]);

          return {
            ...restaurant,
            distance: distance ? parseFloat(distance.toFixed(2)) : null,
            distanceText: distance 
              ? `${distance.toFixed(1)} km` 
              : 'Distance unavailable'
          };
        } catch (error) {
          return {
            ...restaurant,
            distance: null,
            distanceText: 'Distance unavailable'
          };
        }
      })
    );

    const sortedRestaurants = restaurantsWithDistance.sort((a, b) => {
      if (a.distance === null) return 1;
      if (b.distance === null) return -1;
      return a.distance - b.distance;
    });

    return NextResponse.json(sortedRestaurants);
  } catch (error) {
    console.error('Error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch restaurants' },
      { status: 500 }
    );
  }
} 